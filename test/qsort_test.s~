# File test/qsort_test.s


# ----------------------------
# VTables

.data
.align 8

_Quicksort_DV:
	.quad _Quicksort_main
	.quad _Quicksort_printArray
	.quad _Quicksort_initArray
	.quad _Quicksort_quicksort
	.quad _Quicksort_partition


.align 8
_Quicksort_main:
pushq %rbp                   # prologue
movq %rsp, %rbp
pushq %rbx

cmpq $0, 24(%rbp)
je labelNullPtrError
movq 24(%rbp), %rax
movq -8(%rax), %rax
movq %rax, 80(%rbp)
movq 80(%rbp), %rax
cmpq $1, %rax
setne %al
movq %rax, 16(%rbp)
movq $1, %rax
xorq 16(%rbp), %rax
movq %rax, 16(%rbp)
movq $1, %rax
cmpq 16(%rbp), %rax
je L0
movq _str0(%rip), %rdi
call __LIB_println


movq $1, %rdi
call __LIB_exit


L0:
cmpq $0, 24(%rbp)
je labelNullPtrError
movq $0, %rax
cmpq $0, %rax
jl labelArrayBoundsError
movq 24(%rbp), %rax
movq -8(%rax), %rax
cmpq $0, %rax
jge labelArrayBoundsError
movq 144(%rbp), %rdi
movq $0, %rsi
call __LIB_stoi
movq %rax, 208(%rbp)


movq 208(%rbp), %rax
movq %rax, -8(%rbp)
movq -8(%rbp), %rax
cmpq $0, %rax
setle %al
movq %rax, 272(%rbp)
movq $1, %rax
xorq 272(%rbp), %rax
movq %rax, 272(%rbp)
movq $1, %rax
cmpq 272(%rbp), %rax
je L1
movq _str1(%rip), %rdi
call __LIB_println


movq $1, %rdi
call __LIB_exit


L1:
cmpq $0, -8(%rbp)
jl labelArraySizeError
movq 336(%rbp), %rdi
call __LIB_allocateArray
movq %rax, 336(%rbp)


cmpq $0, 0(%rbp)
je labelNullPtrError
movq 336(%rbp), %rax
movq %rax, 400(%rbp)
movq -8(%rbp), %rax
subq $1, %rax
movq 464(%rbp), %rax
epilogue_Quicksort_main:
popq %rbx                    # epilogue
movq %rbp,%rsp
popq %rbp
ret


.align 8
_Quicksort_printArray:
pushq %rbp                   # prologue
movq %rsp, %rbp
pushq %rbx

movq $0, %rax
movq %rax, -8(%rbp)
movq _str2(%rip), %rdi
call __LIB_print


L2:
cmpq $0, 0(%rbp)
je labelNullPtrError
cmpq $0, 80(%rbp)
je labelNullPtrError
movq 80(%rbp), %rax
movq -8(%rax), %rax
movq %rax, 144(%rbp)
movq -8(%rbp), %rax
cmpq 144(%rbp), %rax
setl %al
movq %rax, 16(%rbp)
movq $1, %rax
xorq 16(%rbp), %rax
movq %rax, 16(%rbp)
movq $1, %rax
cmpq 16(%rbp), %rax
je L3
cmpq $0, 0(%rbp)
je labelNullPtrError
cmpq $0, 272(%rbp)
je labelNullPtrError
movq $0, %rax
cmpq -8(%rbp), %rax
jl labelArrayBoundsError
movq 272(%rbp), %rax
movq -8(%rax), %rax
cmpq -8(%rbp), %rax
jge labelArrayBoundsError
movq 208(%rbp), %rdi
call __LIB_printi


movq _str3(%rip), %rdi
call __LIB_print


movq -8(%rbp), %rax
addq $1, %rax
movq %rax, 336(%rbp)
movq 336(%rbp), %rax
movq %rax, -8(%rbp)
L3:
movq _str4(%rip), %rdi
call __LIB_print


epilogue_Quicksort_printArray:
popq %rbx                    # epilogue
movq %rbp,%rsp
popq %rbp
ret


.align 8
_Quicksort_initArray:
pushq %rbp                   # prologue
movq %rsp, %rbp
pushq %rbx

movq $0, %rax
movq %rax, -8(%rbp)
L4:
cmpq $0, 0(%rbp)
je labelNullPtrError
cmpq $0, 80(%rbp)
je labelNullPtrError
movq 80(%rbp), %rax
movq -8(%rax), %rax
movq %rax, 144(%rbp)
movq -8(%rbp), %rax
cmpq 144(%rbp), %rax
setl %al
movq %rax, 16(%rbp)
movq $1, %rax
xorq 16(%rbp), %rax
movq %rax, 16(%rbp)
movq $1, %rax
cmpq 16(%rbp), %rax
je L5
cmpq $0, 0(%rbp)
je labelNullPtrError
cmpq $0, 272(%rbp)
je labelNullPtrError
movq 272(%rbp), %rax
movq -8(%rax), %rax
movq %rax, 336(%rbp)
movq 336(%rbp), %rax
movq $0, %rdx
movq $2, %rdi
mulq %rdi
movq 208(%rbp), %rax
movq 208(%rbp), %rdi
call __LIB_random
movq %rax, 400(%rbp)


cmpq $0, 0(%rbp)
je labelNullPtrError
cmpq $0, 464(%rbp)
je labelNullPtrError
movq $0, %rax
cmpq -8(%rbp), %rax
jl labelArrayBoundsError
movq 464(%rbp), %rax
movq -8(%rax), %rax
cmpq -8(%rbp), %rax
jge labelArrayBoundsError
movq -8(%rbp), %rax
addq $1, %rax
movq %rax, 528(%rbp)
movq 528(%rbp), %rax
movq %rax, -8(%rbp)
L5:
epilogue_Quicksort_initArray:
popq %rbx                    # epilogue
movq %rbp,%rsp
popq %rbp
ret


.align 8
_Quicksort_quicksort:
pushq %rbp                   # prologue
movq %rsp, %rbp
pushq %rbx

movq 24(%rbp), %rax
cmpq 32(%rbp), %rax
setl %al
movq %rax, 8(%rbp)
movq $1, %rax
xorq 8(%rbp), %rax
movq %rax, 8(%rbp)
movq $1, %rax
cmpq 8(%rbp), %rax
je L6
movq 72(%rbp), %rax
movq %rax, 0(%rbp)
movq 0(%rbp), %rax
addq $1, %rax
movq %rax, 136(%rbp)
L6:
epilogue_Quicksort_quicksort:
popq %rbx                    # epilogue
movq %rbp,%rsp
popq %rbp
ret


.align 8
_Quicksort_partition:
pushq %rbp                   # prologue
movq %rsp, %rbp
pushq %rbx

movq 32(%rbp), %rax
movq %rax, -16(%rbp)
movq 24(%rbp), %rax
movq %rax, -24(%rbp)
cmpq $0, 0(%rbp)
je labelNullPtrError
cmpq $0, 104(%rbp)
je labelNullPtrError
movq $0, %rax
cmpq 24(%rbp), %rax
jl labelArrayBoundsError
movq 104(%rbp), %rax
movq -8(%rax), %rax
cmpq 24(%rbp), %rax
jge labelArrayBoundsError
movq 40(%rbp), %rax
movq %rax, -32(%rbp)
L7:
movq $1, %rax
xorq $1, %rax
movq $1, %rax
cmpq $1, %rax
je L8
L9:
cmpq $0, 0(%rbp)
je labelNullPtrError
cmpq $0, 296(%rbp)
je labelNullPtrError
movq $0, %rax
cmpq -24(%rbp), %rax
jl labelArrayBoundsError
movq 296(%rbp), %rax
movq -8(%rax), %rax
cmpq -24(%rbp), %rax
jge labelArrayBoundsError
movq 232(%rbp), %rax
cmpq -32(%rbp), %rax
setl %al
movq %rax, 168(%rbp)
movq $1, %rax
xorq 168(%rbp), %rax
movq %rax, 168(%rbp)
movq $1, %rax
cmpq 168(%rbp), %rax
je L10
movq -24(%rbp), %rax
addq $1, %rax
movq %rax, 360(%rbp)
movq 360(%rbp), %rax
movq %rax, -24(%rbp)
L10:
L11:
cmpq $0, 0(%rbp)
je labelNullPtrError
cmpq $0, 552(%rbp)
je labelNullPtrError
movq $0, %rax
cmpq -16(%rbp), %rax
jl labelArrayBoundsError
movq 552(%rbp), %rax
movq -8(%rax), %rax
cmpq -16(%rbp), %rax
jge labelArrayBoundsError
movq 488(%rbp), %rax
cmpq -32(%rbp), %rax
setg %al
movq %rax, 424(%rbp)
movq $1, %rax
xorq 424(%rbp), %rax
movq %rax, 424(%rbp)
movq $1, %rax
cmpq 424(%rbp), %rax
je L12
movq -16(%rbp), %rax
subq $1, %rax
movq 616(%rbp), %rax
movq 616(%rbp), %rax
movq %rax, -16(%rbp)
L12:
movq -24(%rbp), %rax
cmpq -16(%rbp), %rax
setge %al
movq %rax, 680(%rbp)
movq $1, %rax
xorq 680(%rbp), %rax
movq %rax, 680(%rbp)
movq $1, %rax
cmpq 680(%rbp), %rax
je L13
jmp L8
L13:
cmpq $0, 0(%rbp)
je labelNullPtrError
cmpq $0, 808(%rbp)
je labelNullPtrError
movq $0, %rax
cmpq -24(%rbp), %rax
jl labelArrayBoundsError
movq 808(%rbp), %rax
movq -8(%rax), %rax
cmpq -24(%rbp), %rax
jge labelArrayBoundsError
movq 744(%rbp), %rax
movq %rax, -8(%rbp)
cmpq $0, 0(%rbp)
je labelNullPtrError
cmpq $0, 936(%rbp)
je labelNullPtrError
movq $0, %rax
cmpq -16(%rbp), %rax
jl labelArrayBoundsError
movq 936(%rbp), %rax
movq -8(%rax), %rax
cmpq -16(%rbp), %rax
jge labelArrayBoundsError
cmpq $0, 0(%rbp)
je labelNullPtrError
cmpq $0, 1000(%rbp)
je labelNullPtrError
movq $0, %rax
cmpq -24(%rbp), %rax
jl labelArrayBoundsError
movq 1000(%rbp), %rax
movq -8(%rax), %rax
cmpq -24(%rbp), %rax
jge labelArrayBoundsError
cmpq $0, 0(%rbp)
je labelNullPtrError
cmpq $0, 1064(%rbp)
je labelNullPtrError
movq $0, %rax
cmpq -16(%rbp), %rax
jl labelArrayBoundsError
movq 1064(%rbp), %rax
movq -8(%rax), %rax
cmpq -16(%rbp), %rax
jge labelArrayBoundsError
movq -24(%rbp), %rax
addq $1, %rax
movq %rax, 1128(%rbp)
movq 1128(%rbp), %rax
movq %rax, -24(%rbp)
movq -16(%rbp), %rax
subq $1, %rax
movq 1192(%rbp), %rax
movq 1192(%rbp), %rax
movq %rax, -16(%rbp)
L8:
movq -16(%rbp), %rax
ret
epilogue_Quicksort_partition:
popq %rbx                    # epilogue
movq %rbp,%rsp
popq %rbp
ret


# ----------------------------
# Error handling.  Jump to these procedures when a run-time check fails.

.data
.align 8

.quad 23
  strNullPtrErrorChars:     .ascii "Null pointer violation."
strNullPtrError: .quad strNullPtrErrorChars

.quad 23
  strArrayBoundsErrorChars: .ascii "Array bounds violation."
strArrayBoundsError: .quad strArrayBoundsErrorChars

.quad 21
  strArraySizeErrorChars:   .ascii "Array size violation."
strArraySizeError: .quad strArraySizeErrorChars

.text
.align 8
labelNullPtrError:
    movq strNullPtrError(%rip), %rdi
    call __LIB_println
    movq $1, %rdi
    call __LIB_exit

.align 8
labelArrayBoundsError:
    movq strArrayBoundsError(%rip), %rdi
    call __LIB_println
    movq $1, %rdi
    call __LIB_exit

.align 8
labelArraySizeError:
    movq strArraySizeError(%rip), %rdi
    call __LIB_println
    movq $1, %rdi
    call __LIB_exit



# The main entry point.  Allocate object and invoke main on it.

.text
.align 8
.globl __ic_main
__ic_main:
       pushq %rbp                        # prologue
       movq %rsp,%rbp                
       pushq %rdi                        # o.main(args) -> push args

       movq $0, %rdi                 # o = new Quicksort

       call __LIB_allocateObject   
       leaq _Quicksort_DV(%rip), %rdi       

       movq %rdi, (%rax)
       pushq %rax                        # o.main(args) -> push o
       movq (%rax), %rax            
       call *0(%rax)                   # main is at offset 0 in vtable

       addq $16, %rsp                
       movq $0, %rax                     # __ic_main always returns 0

       movq %rbp,%rsp                    # epilogue
       popq %rbp                    
       ret                         



# ----------------------------
# String Constants

.data
.align 8

.quad 1
  _str3Chars:	.ascii " "
_str3:	.quad _str3Chars
.quad 1
  _str4Chars:	.ascii "\n"
_str4:	.quad _str4Chars
.quad 20
  _str1Chars:	.ascii "Invalid array length"
_str1:	.quad _str1Chars
.quad 24
  _str0Chars:	.ascii "Unspecified array length"
_str0:	.quad _str0Chars
.quad 16
  _str2Chars:	.ascii "Array elements: "
_str2:	.quad _str2Chars



