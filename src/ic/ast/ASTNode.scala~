// (c) 2015 drsmith bijan jcf1
package ic.ast

import ic.lex._;

//All Abstract Node Types
abstract class ASTNode(line: Int);
abstract class ASTDecl(line: Int) extends ASTNode(line) {};
abstract class ASTType(line: Int) extends ASTNode(line) {}
abstract class ASTStmt(line: Int) extends ASTNode(line) {};
abstract class ASTExpr(line: Int) extends ASTNode(line) {};
abstract class ASTCall(line: Int) extends ASTExpr(line) {}
abstract class ASTLoc(line: Int) extends ASTExpr(line) {};
abstract class ASTBinOp {};
abstract class ASTUnOp {};
abstract class ASTLiteral(line: Int) extends ASTExpr(line) {};

case class ASTProgram(classes: List[ASTClassDecl], line: Int) extends ASTNode(line) {}
case class ASTClassDecl(cls_id: String, ext: Option[ASTClassID], decls: List[ASTDecl], line: Int) extends ASTNode(line) {}

//Decl Nodes
case class ASTFieldDecl(t: ASTType, id: String, id_list: List[String], line: Int) extends ASTDecl(line) {}
case class ASTMethodDecl(t: ASTType, id: String, forms: List[ASTFormal], block: ASTBlock, line: Int) extends ASTDecl(line) {}

case class ASTFormal(t: ASTType, id: String, line: Int) extends ASTNode(line) {}

//Type Nodes: ASTSType is any non array type
case class ASTVoid(line: Int) extends ASTType(line) {}
case class ASTInt(line: Int) extends ASTType(line) {}
case class ASTBool(line: Int) extends ASTType(line) {}
case class ASTString(line: Int) extends ASTType(line) {}
case class ASTClassID(cls_id: String, line: Int) extends ASTType(line) {}
case class ASTArray(t: ASTType, line: Int) extends ASTType(line) {}

case class ASTBlock(decls: List[ASTVarDecl], stmts: List[ASTStmt], line: Int) extends ASTNode(line) {}
case class ASTVarDecl(t: ASTType, id: String, optExpr: Option[ASTExpr], line: Int) extends ASTNode(line) {}
//Partial Var Decls for making ;lists of var decls
case class ASTPartialVarDecl(val id: String, val expr: Option[ASTExpr], val line: Int) extends ASTNode(line) {}

//Stmt Nodes
case class ASTStmtRet(optExpr: Option[ASTExpr], line: Int) extends ASTStmt(line) {}
case class ASTStmtIf(test: ASTExpr, cond: ASTStmt, opElse: Option[ASTStmt], line: Int) extends ASTStmt(line) {}
case class ASTStmtWhile(test: ASTExpr, stmt: ASTStmt, line: Int) extends ASTStmt(line) {}
case class ASTStmtBreak(line: Int) extends ASTStmt(line) {}
case class ASTStmtCont(line: Int) extends ASTStmt(line) {}
case class ASTStmtBlock(block: ASTBlock, line: Int) extends ASTStmt(line) {}

//Expr Nodes
case class ASTExprNewClass(cls_id: String, line: Int) extends ASTExpr(line) {}
case class ASTExprArray(t: ASTType, expr: ASTExpr, line: Int) extends ASTExpr(line) {}
case class ASTExprLen(expr: ASTExpr, line: Int) extends ASTExpr(line) {}
case class ASTExprBinop(lExpr: ASTExpr, binop: ASTBinOp, rExpr: ASTExpr, line: Int) extends ASTExpr(line) {}
case class ASTExprUnop(unop: ASTUnOp, expr: ASTExpr, line: Int) extends ASTExpr(line) {}

//Call Nodes
case class ASTLibCall(id: String, opList: List[ASTExpr], line: Int) extends ASTCall(line) {}
case class ASTVirtualCall(opExpr: ASTExpr, id: String, opList: List[ASTExpr], line:Int) extends ASTCall(line) {}

//Location Nodes
case class ASTLocID(id: String, line: Int) extends ASTLoc(line) {}
case class ASTMemberAccess(reciever: ASTExpr, id: String, line: Int) extends ASTLoc(line) {}
case class ASTArrayAccess(array: ASTExpr, index: ASTExpr, line: Int) extends ASTLoc(line) {}

case class BinPlus() extends ASTBinOp {}
case class BinMinus() extends ASTBinOp {}
case class BinMult() extends ASTBinOp {}
case class BinDiv() extends ASTBinOp {}
case class BinMod() extends ASTBinOp {}
case class BinAnd() extends ASTBinOp {}
case class BinOr() extends ASTBinOp {}
case class BinLt() extends ASTBinOp {}
case class BinLe() extends ASTBinOp {}
case class BinGt() extends ASTBinOp {}
case class BinGe() extends ASTBinOp {}
case class BinEqeq() extends ASTBinOp {}
case class BinNe() extends ASTBinOp {}

case class UnNeg() extends ASTUnOp {}
case class UnNot() extends ASTUnOp {}

case class ASTIntLit(i: Int, line: Int) extends ASTLiteral(line) {}
case class ASTStringLit(s: String, line: Int) extends ASTLiteral(line) {}
case class ASTBoolLit(b: Boolean, line: Int) extends ASTLiteral(line) {}
case class ASTNull(line: Int) extends ASTLiteral(line) {}
