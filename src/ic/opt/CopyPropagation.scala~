package ic.opt;

import ic.ast._;
import ic.dfa._;
import ic.cfg._;
import ic.tac._;

/**
 * Illustrates an Optimization that removes unreachable code.
 * This shows how to stage creating a CFG, performing analysis,
 * and then transforming the code based on the results.
 */
class CopyPropagation extends Optimization {

	/**
	 * Apply the optimization to the method md.
	 */
	def optimize(md : ASTMethodDecl) = {
	  val generator = new CFGGenerator();
		val cfg : ControlFlowGraph = generator.makeCFG(md); 		
		val copies = new ReachingCopiesAnalysis(cfg);
		copies.solve();
				
		// Map each instruction to either the original instruction 
		// or a comment if not reachable.  I could have filtered out the
		// dead code too, but it is easier to read and debug the
		// optimization if you leave comments in where you changed the code
		val optimized = md.tacList.list map
				(instr => 
				  instr match {
				    
				    case TAC_CJump(label: TAC_Label, condition: TACOp, line: Int, comment: String) => {
					    copies.in(cfg.getBlock(instr)).get(condition) match {
					      case Some(x) => {new TAC_CJump(label, x, line, comment);}
					      case None => {instr;}
					    }
				    }

				    //Movement, load store, copy
				    case TAC_Copy(dst: TACOp, src: TACOp, line: Int, comment: String) => {
					    copies.in(cfg.getBlock(instr)).get(src) match {
					      case Some(x) => {new TAC_Copy(dst, x, line, comment);}
					      case None => {instr;}
					    }
				    }

				    case TAC_ArrayStore(array: TACOp, index: TACOp, value: TACOp, line: Int, comment: String) => {
					    copies.in(cfg.getBlock(instr)).get(value) match {
					      case Some(x) => {
					        copies.in(cfg.getBlock(instr)).get(index) match {
					          case Some(y) => {new TAC_ArrayStore(array, y, x, line, comment);}
					          case None => {new TAC_ArrayStore(array, index, x, line, comment);}
					        }
					      }
					      case None => {
					        copies.in(cfg.getBlock(instr)).get(index) match {
					          case Some(y) => {new TAC_ArrayStore(array, y, value, line, comment);}
					          case None => {instr;}
					        }
					      }
					    }
				    }

				    case TAC_FieldStore(receiver: TACOp, field: ASTFieldDecl, value: TACOp, line: Int, comment: String) => {
					    copies.in(cfg.getBlock(instr)).get(value) match {
					      case Some(x) => {new TAC_FieldStore(receiver, field, x, line, comment);}
					      case None => {instr;}
					    }
				    }

				    case TAC_ArrayLoad(dst: TACOp, array: TACOp, index: TACOp, line: Int, comment: String) => {
					    copies.in(cfg.getBlock(instr)).get(index) match {
					      case Some(x) => {new TAC_ArrayLoad(dst, array, x, line, comment);}
					      case None => {instr;}
					    }
				    }

				    //Binary operations
				    case TAC_BinOp(dst: TACOp, lExpr: TACOp, rExpr: TACOp, binop: ASTBinOp, line: Int, comment: String) => {
					    copies.in(cfg.getBlock(instr)).get(lExpr) match {
					      case Some(x) => {
					        copies.in(cfg.getBlock(instr)).get(rExpr) match {
					          case Some(y) => {new TAC_BinOp(dst, x, y, binop, line, comment);}
					          case None => {new TAC_BinOp(dst, x, rExpr, binop, line, comment);}
					        }
					      }
					      case None => {
					        copies.in(cfg.getBlock(instr)).get(rExpr) match {
					          case Some(y) => {new TAC_BinOp(dst, lExpr, y, binop, line, comment);}
					          case None => {instr;}
					        }
					      }
					    }
				    }

				    //Unops
				    case TAC_UnOp(dst: TACOp, expr: TACOp, unop: ASTUnOp, line: Int, comment: String) => {
					    copies.in(cfg.getBlock(instr)).get(expr) match {
					      case Some(x) => {new TAC_UnOp(dst, x, unop, line, comment);}
					      case None => {instr;}
					    }
				    }

				    case TAC_IndexInBounds(array: TACOp, index: TACOp, line: Int, comment: String) => {
					    copies.in(cfg.getBlock(instr)).get(index) match {
					      case Some(x) => {new TAC_IndexInBounds(array, x, line, comment);}
					      case None => {instr;}
					    }
				    }

				    case TAC_DivBy0(divisor: TACOp, line: Int, comment: String) => {
				  	  copies.in(cfg.getBlock(instr)).get(divisor) match {
					      case Some(x) => {new TAC_DivBy0(x, line, comment);}
					      case None => {instr;}
					    }
				    }

				    case TAC_GreaterThan0(index: TACOp, line: Int, comment: String) => {
					    copies.in(cfg.getBlock(instr)).get(index) match {
					      case Some(x) => {new TAC_GreaterThan0(x, line, comment);}
					      case None => {instr;}
					    }
				    }
				    
				    case _ => {instr;}
				  }
				);
		
		md.tacList.list = optimized;
	} 
}

