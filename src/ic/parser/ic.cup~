package ic.parser;

import ic.error.*;
import ic.ast.*;
import java_cup.runtime.*;
import scala.Option;
import ic.ParserUtil;
import scala.collection.*;
import scala.collection.immutable.*;

action code {:

/* Any extra data structures used by your production actions */

/* Helper methods used in your actions. */



:}

parser code {:

/* Throw a syntax error with they line and token */

public void syntax_error(Symbol cur_token) {
    throw new SyntaxError(cur_token, "Error occurred at line:"+cur_token.left+" on symbol \""+cur_token+"\" symbol type: "+cur_token.sym);
}

:}

/* Terminals */
terminal  CLASS, RETURN, THIS, IF, EXTENDS, NEW, VOID, ELSE, LENGTH;
terminal  INT, BOOLEAN, STRING, BREAK, CONTINUE;
terminal  WHILE, NULL, OBRACE;
terminal  CBRACE, OPAREN, CPAREN, COMMA, SEMI, OBRACKET, CBRACKET, EQ;
terminal  DOT, PLUS, MINUS, MULT, DIV, LIBRARY;
terminal  MOD, AND, OR, NOT, LT, LE, GT, GE, EQEQ, NE;
terminal  String ID, CLS_ID, STRING_LIT;
terminal  Integer INT_LIT;
terminal  Boolean  BOOL_LIT;

/* Nonterminals */
nonterminal  ASTProgram		        Program;
nonterminal  List<ASTClassDecl>		ClassDeclList;
nonterminal  ASTClassDecl	       	ClassDecl;
nonterminal  ASTDecl		 	FieldDecl;
nonterminal  ASTDecl			MethodDecl;
nonterminal  List<ASTFormal>		Formals;

nonterminal  ASTType			Type;
nonterminal  ASTBlock 			Block;

nonterminal  List<ASTVarDecl>		VarDeclList;
nonterminal  List<ASTPartialVarDecl>	IdExprList;
nonterminal  scala.Option<ASTExpr>	OptEQExpr;


nonterminal  ASTStmt 			Stmt;
nonterminal  ASTExpr			Expr;
nonterminal  ASTCall			Call;
nonterminal  ASTLibCall			LibCall;
nonterminal  ASTVirtualCall		VirtualCall;
nonterminal  ASTLoc			Location;
nonterminal  ASTLiteral			Literal;
nonterminal  scala.Option<ASTClassID>	OpExtend;
nonterminal  List<String>		IDList;
nonterminal  ASTDecl			FBarM;
nonterminal  List<ASTDecl>		FBarMList;

nonterminal  List<ASTStmt>		StmtList;
nonterminal  scala.Option<ASTExpr>	OptExpr;
nonterminal  scala.Option<ASTStmt>      OptElseStmt;
nonterminal  List<ASTExpr>		ExprList;
nonterminal  List<List<ASTVarDecl>>     VarDeclLists;
nonterminal  ASTLocID			ThisNode;

precedence right EQ;
precedence left OR;
precedence left AND;
precedence left EQEQ, NE;
precedence left LT, LE, GT, GE;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD;
precedence right MINUS, NOT;
precedence left DOT, OBRACKET, OPAREN;

//Must be last to avoid conflicts with if then statements
//else must have a higher precedence than the follow set of then
precedence left ELSE;

/* The grammar */
Program	         ::=	ClassDeclList: cl	{: RESULT = new ASTProgram(cl, clleft); :}
		   ;
		
ClassDeclList  	 ::=    ClassDecl: cd ClassDeclList: cdList	{: RESULT = ParserUtil.append(cdList,cd); :}  
		   |						{: List<ASTClassDecl> temp = ParserUtil.empty(); RESULT = temp; :}
		   ; 
									
ClassDecl      	 ::=    CLASS CLS_ID:c_id OpExtend: ext OBRACE FBarMList: fbarmList CBRACE	{: RESULT = new ASTClassDecl(c_id, ext, fbarmList, c_idleft); :}
 	    	   ;

FBarMList        ::=	FBarM: decl  FBarMList: l 	{: RESULT = ParserUtil.append(l, decl); :} 			
	           |					{: List<ASTDecl> temp = ParserUtil.empty(); RESULT = temp; :}
		   ;
				    			     
FBarM		 ::= 	FieldDecl: f		{: RESULT = f; :}
	           | 	MethodDecl: m		{: RESULT = m; :}
		   ;
							
OpExtend      	 ::=    EXTENDS CLS_ID: c_id	{: RESULT = ParserUtil.some(new ASTClassID(c_id, c_idleft)); :}
		   |				{: RESULT = ParserUtil.<ASTClassID>none(); :}  
		   ;   
									
FieldDecl      	 ::=  	Type: t ID: id IDList: l SEMI	{: RESULT = new ASTFieldDecl(t, id, l, tleft); :}
	           ;

IDList        	 ::=  	COMMA ID: id IDList: idList	{: RESULT = ParserUtil.append(idList, id); :}
		   |	   				{: List<String> l = ParserUtil.empty(); RESULT = l; :}
	    	   ;
					
MethodDecl    	 ::=   	Type: t ID: id OPAREN Formals: f CPAREN Block: b 	{: RESULT = new ASTMethodDecl(t, id, f, b, tleft); :}
		   |	VOID ID: id OPAREN Formals: f CPAREN Block: b    	{: RESULT = new ASTMethodDecl(new ASTVoid(idleft), id, f, b, idleft); :}
		   ;

		
Formals       	 ::=    Type:t ID: id				{:
									List<ASTFormal> fl = ParserUtil.empty();
						   			ASTFormal f = new ASTFormal(t, id, idleft);												                                                                    RESULT = ParserUtil.append(fl, f);						                 						                                                        :}

                   | 	Formals: fl COMMA Type: t ID: id		{: ASTFormal f = new ASTFormal(t, id, tleft); RESULT = ParserUtil.append(fl, f); :}
                   |							{: List<ASTFormal> temp = ParserUtil.empty(); RESULT = temp; :}
		   ;
					
Type         	 ::=    INT: n			   {: RESULT = new ASTInt(nleft); :}
                   | 	BOOLEAN: n 		   {: RESULT = new ASTBool(nleft); :}
		   |	STRING: n 		   {: RESULT = new ASTString(nleft); :}
		   |	CLS_ID: n 		   {: RESULT = new ASTClassID(n, nleft); :}
		   |	Type: n OBRACKET CBRACKET  {: RESULT = new ASTArray(n, nleft); :}
		   ;
					
Block          	 ::=   	OBRACE VarDeclLists: v StmtList: s CBRACE	{: RESULT = new ASTBlock(ParserUtil.flattenList(v), s, vleft); :}
		   ;
		   
VarDeclLists     ::=    VarDeclList: l  VarDeclLists: lists		{: RESULT = ParserUtil.append(lists, l); :}
         	   | 							{: RESULT = ParserUtil.empty(); :}
		   ;

VarDeclList      ::=	Type: t IdExprList: l SEMI			{: List<ASTVarDecl> varDeclList = ParserUtil.createVarDeclList(l, t);
		 		      		      			   RESULT = varDeclList; :}
		   ;
                            
IdExprList       ::=	ID: id OptEQExpr: e				{: List<ASTPartialVarDecl> l = ParserUtil.empty(); 
		 		       		   			   ASTPartialVarDecl p = new ASTPartialVarDecl(id,e, idleft);
									   RESULT = ParserUtil.append(l,p); :} 									
	           |  	ID: id OptEQExpr: e COMMA IdExprList: l		{: ASTPartialVarDecl p = new ASTPartialVarDecl(id, e, idleft);
		   		       		    	  	      	   RESULT = ParserUtil.append(l,p); :}
		   ;
					
OptEQExpr     	 ::=   	EQ Expr: n 		{: RESULT = ParserUtil.some(n); :}
		   |	   			{: RESULT = ParserUtil.<ASTExpr>none(); :}
		   ;
					
StmtList      	 ::=  	Stmt: s StmtList: stmtList	{: RESULT = ParserUtil.append(stmtList,s); :}
	           | 					{: RESULT = ParserUtil.empty(); :}
                   ;
				
Stmt          	 ::=   	Location: l EQ Expr: e SEMI				{: RESULT = new ASTStmtLoc(l, e, lleft); :}
                   |   	Call: c SEMI   	       					{: RESULT = new ASTStmtCall(c, cleft); :}
                   |   	RETURN OptExpr: oe SEMI					{: RESULT = new ASTStmtRet(oe, oeleft); :}
                   |   	IF OPAREN Expr: e CPAREN Stmt: s OptElseStmt: oes	{: RESULT = new ASTStmtIf(e, s, oes, eleft); :}
                   |   	WHILE OPAREN Expr: e CPAREN Stmt: s	      		{: RESULT = new ASTStmtWhile(e, s, eleft); :}
                   |   	BREAK: b SEMI   	     	    	  		{: RESULT = new ASTStmtBreak(bleft); :}
                   |   	CONTINUE: c SEMI					{: RESULT = new ASTStmtCont(cleft); :}
                   |   	Block: block						{: RESULT = new ASTStmtBlock(block, blockleft); :}
                   ;
                	
OptExpr          ::=   	Expr: expr	{: RESULT = ParserUtil.some(expr); :}
		   | 		     	{: RESULT = ParserUtil.<ASTExpr>none(); :}
	           ;
					
OptElseStmt      ::=   ELSE Stmt: s	{: RESULT = ParserUtil.some(s); :}
		   | 		     	{: RESULT = ParserUtil.<ASTStmt>none(); :}
		   ;
					
Expr          	 ::=   Location: l				{: RESULT = l; :}						
                   |   Call: c	  				{: RESULT = c; :}
                   |   THIS: t					{: RESULT = new ASTLocID("this", tleft); :}
                   |   NEW CLS_ID: cls_id OPAREN CPAREN		{: RESULT = new ASTExprNewClass(cls_id, cls_idleft); :}
                   |   NEW Type: t OBRACKET Expr: expr CBRACKET	{: RESULT = new ASTExprArray(t, expr, exprleft); :} 
                   |   Expr: expr DOT LENGTH 	       		{: RESULT = new ASTExprLen(expr, exprleft); :}
                   |   Expr: lexpr PLUS: op Expr: rexpr			{: RESULT = new ASTExprBinop(lexpr, new BinPlus(), rexpr, opleft); :}
                   |   Expr: lexpr MULT: op Expr: rexpr			{: RESULT = new ASTExprBinop(lexpr, new BinMult(), rexpr, opleft); :}
                   |   Expr: lexpr DIV: op Expr: rexpr			{: RESULT = new ASTExprBinop(lexpr, new BinDiv(), rexpr, opleft); :}
                   |   Expr: lexpr MINUS: op Expr: rexpr		{: RESULT = new ASTExprBinop(lexpr, new BinMinus(), rexpr, opleft); :}
                   |   Expr: lexpr MOD: op Expr: rexpr			{: RESULT = new ASTExprBinop(lexpr, new BinMod(), rexpr, opleft); :}
                   |   Expr: lexpr AND: op Expr: rexpr			{: RESULT = new ASTExprBinop(lexpr, new BinAnd(), rexpr, opleft); :}
                   |   Expr: lexpr OR: op Expr: rexpr			{: RESULT = new ASTExprBinop(lexpr, new BinOr(), rexpr, opleft); :}
                   |   Expr: lexpr LT: op Expr: rexpr			{: RESULT = new ASTExprBinop(lexpr, new BinLt(), rexpr, opleft); :}
                   |   Expr: lexpr LE: op Expr: rexpr			{: RESULT = new ASTExprBinop(lexpr, new BinLe(), rexpr, opleft); :}
                   |   Expr: lexpr GT: op Expr: rexpr			{: RESULT = new ASTExprBinop(lexpr, new BinGt(), rexpr, opleft); :}
                   |   Expr: lexpr GE: op Expr: rexpr			{: RESULT = new ASTExprBinop(lexpr, new BinGe(), rexpr, opleft); :}
                   |   Expr: lexpr EQEQ: op Expr: rexpr			{: RESULT = new ASTExprBinop(lexpr, new BinEqeq(), rexpr, opleft); :}
                   |   Expr: lexpr NE: op Expr: rexpr			{: RESULT = new ASTExprBinop(lexpr, new BinNe(), rexpr, opleft); :}
                   |   MINUS: op Expr: expr   	 			{: RESULT = new ASTExprUnop(new UnNeg(), expr, opleft); :}
                   |   NOT: op Expr: expr   	 			{: RESULT = new ASTExprUnop(new UnNot(), expr, opleft); :}
                   |   Literal: l					{: RESULT = l; :}
                   |   OPAREN Expr: expr CPAREN				{: RESULT = expr; :}
                   ;
                	
Call          	 ::=   LibCall: lc	{: RESULT = lc; :}
		   |   VirtualCall: vc	{: RESULT = vc; :}
		   ;
					
LibCall          ::=   LIBRARY DOT ID: id OPAREN ExprList: el CPAREN	{: RESULT = new ASTLibCall(id, el, idleft); :} 
		   ;

VirtualCall      ::=   Expr: expr DOT ID:id OPAREN ExprList: exprList CPAREN      {: RESULT = new ASTVirtualCall(expr, id, exprList, idleft); :}
         	    |  ID: id OPAREN ExprList: exprList CPAREN        {: RESULT = new ASTVirtualCall(new ASTLocID("this", idleft), id, exprList, idleft); :}
		    ;
					
ExprList      	  ::=  Expr: ex					 {: List<ASTExpr> temp = ParserUtil.empty();  RESULT = ParserUtil.append(temp, ex); :}
		    |  ExprList: exprList COMMA Expr: expr	 {: RESULT = ParserUtil.append(exprList, expr); :} 
		    |  		 	  	      		 {: List<ASTExpr> l = ParserUtil.empty(); RESULT = l; :}
         	    ;
					
Location      	  ::=  ID: id				       {: RESULT = new ASTLocID(id, idleft); :}
                    |  Expr:accessed DOT ID:member   	       {: RESULT = new ASTMemberAccess(accessed, member, memberleft); :}
         	    |  Expr:array OBRACKET Expr:index CBRACKET {: RESULT = new ASTArrayAccess(array, index, arrayleft); :}
		    ;   
                	
Literal           ::=  INT_LIT: n	      {: RESULT = new ASTIntLit(n, nleft); :}
                    |  STRING_LIT: n          {: RESULT = new ASTStringLit(n, nleft); :}
                    |  BOOL_LIT: n            {: RESULT = new ASTBoolLit(n, nleft); :}
                    |  NULL: n                {: RESULT = new ASTNull(nleft); :}
                    ;
                	
