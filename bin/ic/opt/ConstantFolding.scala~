package ic.opt

import ic.ast._;
import ic.dfa._;
import ic.cfg._;
import ic.tac._;

class ConstantFolding extends Optimization {

  def optimize(md: ASTMethodDecl) : Unit = {
    val gen = new CFGGenerator();
    val cfg : ControlFlowGraph = gen.makeCFG(md); 		
    val cfa = new ConstantFoldingAnalysis(cfg);
    cfa.solve();
    
    
    val optimized = md.tacList.list map 
    (instr => 
      {
        val m = cfa.in(cfg.getBlock(instr));
        instr match{
          case TAC_Copy(dst, src, line, comment) => new TAC_Copy(dst, getOp(src, m), line, comment);
          case TAC_BinOp(dst, lExpr, rExpr, binop, line, comment) => new TAC_BinOp(dst, getOp(lExpr, m), getOp(rExpr, m), binop, line, comment)
        }  
          }
      );
    }
  
  
  def getOp(op: TACOp, m:Map[TACOp, LatVal]): TACOp = {
    m.getOrElse(op, UNDEF()) match{
      case NAC() | UNDEF() => op
      case LIT(x) => new TAC_Lit(x, op.line, "Replaced " + op + " with constant " + x)
    }
  }
}
